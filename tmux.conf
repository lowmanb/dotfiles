#############

# From vim-sensible

# utf8 is on
set -g utf8 on
set -g status-utf8 on

# address vim mode switching delay (http://superuser.com/a/252717/65504)
set -s escape-time 0

# increase scrollback buffer size
set -g history-limit 50000

# tmux messages are displayed for 4 seconds
set -g display-time 4000

# refresh 'status-left' and 'status-right' more often
set -g status-interval 5

# set only on OS X where it's required
set -g default-command "reattach-to-user-namespace -l $SHELL"

# upgrade $TERM
set -g default-terminal "screen-256color"

# emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
set -g status-keys emacs

# focus events enabled for terminals that support them
set -g focus-events on

# super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

#############

# Solarized color scheme
# TODO set tmux colors manually

#############

# Hacks to get italic fonts to work
set -g default-terminal "tmux-256color"
set -as terminal-overrides ',xterm*:sitm=\E[3m'

#############

# Enable VI bindings (where supported)
# TODO Do this without plugin
# TODO copy-paste binding without plugin
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi 'v' send -X begin-selection

#############

# dwm-ish bindings

# Bind keys to switch between workspaces.
# TODO dry this up somehow
bind -n 'M-(' if-shell 'tmux select-window -t :1'  '' 'new-window -t :1'
bind -n 'M-)' if-shell 'tmux select-window -t :2'  '' 'new-window -t :2'
bind -n 'M-}' if-shell 'tmux select-window -t :3'  '' 'new-window -t :3'
bind -n 'M-+' if-shell 'tmux select-window -t :4'  '' 'new-window -t :4'
bind -n 'M-{' if-shell 'tmux select-window -t :5'  '' 'new-window -t :5'
bind -n 'M-]' if-shell 'tmux select-window -t :6'  '' 'new-window -t :6'
bind -n 'M-[' if-shell 'tmux select-window -t :7'  '' 'new-window -t :7'
bind -n 'M-!' if-shell 'tmux select-window -t :8'  '' 'new-window -t :8'
bind -n 'M-=' if-shell 'tmux select-window -t :9'  '' 'new-window -t :9'
bind -n 'M-*' if-shell 'tmux select-window -t :10' '' 'new-window -t :10'

# Move window between workspace
# TODO refactor for modularity
bind -n 'M-1' if-shell 'tmux join-pane -t :1'  '' 'new-window -dt :1;  join-pane -t :1;  select-pane -t top-left; kill-pane' \; select-layout \; select-layout -E
bind -n 'M-2' if-shell 'tmux join-pane -t :2'  '' 'new-window -dt :2;  join-pane -t :2;  select-pane -t top-left; kill-pane' \; select-layout \; select-layout -E
bind -n 'M-3' if-shell 'tmux join-pane -t :3'  '' 'new-window -dt :3;  join-pane -t :3;  select-pane -t top-left; kill-pane' \; select-layout \; select-layout -E
bind -n 'M-4' if-shell 'tmux join-pane -t :4'  '' 'new-window -dt :4;  join-pane -t :4;  select-pane -t top-left; kill-pane' \; select-layout \; select-layout -E
bind -n 'M-5' if-shell 'tmux join-pane -t :5'  '' 'new-window -dt :5;  join-pane -t :5;  select-pane -t top-left; kill-pane' \; select-layout \; select-layout -E
bind -n 'M-6' if-shell 'tmux join-pane -t :6'  '' 'new-window -dt :6;  join-pane -t :6;  select-pane -t top-left; kill-pane' \; select-layout \; select-layout -E
bind -n 'M-7' if-shell 'tmux join-pane -t :7'  '' 'new-window -dt :7;  join-pane -t :7;  select-pane -t top-left; kill-pane' \; select-layout \; select-layout -E
bind -n 'M-8' if-shell 'tmux join-pane -t :8'  '' 'new-window -dt :8;  join-pane -t :8;  select-pane -t top-left; kill-pane' \; select-layout \; select-layout -E
bind -n 'M-9' if-shell 'tmux join-pane -t :9'  '' 'new-window -dt :9;  join-pane -t :9;  select-pane -t top-left; kill-pane' \; select-layout \; select-layout -E
bind -n 'M-0' if-shell 'tmux join-pane -t :10' '' 'new-window -dt :10; join-pane -t :10; select-pane -t top-left; kill-pane' \; select-layout \; select-layout -E

# Invoke the zoom feature.
bind -n M-f resize-pane -Z

# Cycle through layouts
bind -n M-Space next-layout

# Move through stack
bind -n M-j select-pane -t :.+
bind -n M-k select-pane -t :.-

# Change pane position in stack
bind -n M-J swap-pane -t :.+ \; select-pane -t :.+
bind -n M-K swap-pane -t :.- \; select-pane -t :.-

# Swap pane with first pane (easier than pushing new pane onto stack)
bind -n M-e swap-pane -t :.0 \; select-pane -t :.0

# Open a terminal
bind -n M-Enter run-shell 'tmux split-window -t :.0 -c "#{pane_current_path}"' \; swap-pane -s :.1 -t :.0 \; select-pane -t :.0

# Close a window with Alt + Shift + q.
bind -n M-Q kill-pane \; select-layout \; select-layout -E

# Autorefresh layout after deleting a pane.
set-hook -g after-split-window 'select-layout ; select-layout -E'
set-hook -g pane-exited 'select-layout ; select-layout -E'
	
# Autoselect layout after creating new window.
set-hook -g window-linked "select-layout ; select-layout -E"
